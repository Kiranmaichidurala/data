!pip install seaborn scikit-learn
pip install requests
import zipfile
import os

zip_file_path='C:\\Users\\kiran\\OneDrive\\Desktop\\dataset.zip'
print("hello")
extract_path='C:\\Users\\kiran\\OneDrive\\Desktop\\dataset'
print(os.listdir(extract_path))

!pip install torch torchvision torchaudio

import torch
from torchvision import transforms
from PIL import Image
import torch.nn as nn

from torchvision import datasets, transforms
from torch.utils.data import DataLoader 
transform = transforms.Compose([
    transforms.Resize((64, 64)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])
dataset = datasets.ImageFolder(root='C:\\Users\\kiran\\OneDrive\\Desktop\\dataset', transform=transform)
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
train_dataset, test_dataset = torch.utils.data.random_split(dataset, [train_size, test_size])
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)
print("data preprocessing is done")

import torch
import torch.nn as nn 
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from PIL import Image
image_path = 'C:\\Users\\kiran\\OneDrive\\Desktop\\rotten1.png'  
image = Image.open(image_path).convert('RGB')
transform = transforms.Compose([
    transforms.Resize((64, 64)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])
image = transform(image)
image = image.unsqueeze(0)

class FreshnessCNN(nn.Module):
    def __init__(self):
        super(FreshnessCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self._to_linear = None
        self.fc = None

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        if self._to_linear is None:
            self._to_linear = x.view(x.size(0), -1).size(1)
            self.fc = nn.Linear(self._to_linear, 2)
        x = x.view(-1, self._to_linear)
        x = self.fc(x)
        return x

model = FreshnessCNN()
output = model(image) 
_, predicted_class = torch.max(output.data, 1)
classes = ['fresh', 'not fresh']
predicted_label = classes[predicted_class.item()]
print(f'The model predicts the item is: {predicted_label}')
